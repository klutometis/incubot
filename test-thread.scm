;;; Copyright (C) 2008, Peter Danenberg
(require-extension
 (srfi 18 27))
(define (make-timer time thunk)
  (make-thread (lambda () (thread-sleep! time) (thunk))))
(define (thread-start/timeout! timeout thread)
  (let ((thread (thread-start! thread)))
    (let* ((flag (random-real))
           (join (thread-join! thread timeout flag)))
      (if (= join flag)
          (thread-terminate! thread)
          join))))
;; (let* ((thread (thread-start! (make-thread (lambda () (thread-sleep! 3) 'harro))))
;;        (y (thread-start! (make-thread (lambda () ((lambda (x) (x x)) (lambda (x) (x x)))))))
;;        (timer (make-timer 2 (lambda () (print 'oh-jeah)))))
;;   (thread-start! timer)
;;   (let* ((flag (random-real))
;;          (join (thread-join! thread 2 flag)))
;;     (if (= join flag)
;;         (thread-terminate! thread)
;;         join)))
(let ((thread (make-thread (lambda () ((lambda (x) (x x)) (lambda (x) (print 1) (x x)))))))
  (thread-start/timeout! 1 thread))
